#ifndef SIGCTX_H#define SIGCTX_H#include <stdint.h>#include <bitpunch/config.h>#include <bitpunch/math/gf2.h>#include <bitpunch/code/codectx.h>#include <bitpunch/crypto/signature/ldgm/ldgmsigtype.h>typedef enum _BPU_T_EN_Signature_Types {  BPU_EN_SIGN_LDGM} BPU_T_EN_Signature_Types;typedef enum _BPU_T_EN_Signature_Verification_Result_Type {  BPU_EN_SIG_ACCEPT, BPU_EN_SIG_DISCARD} BPU_T_EN_Signature_Verification_Result_Type;typedef union _BPU_T_UN_Signature {  BPU_T_LDGM_Signature* ldgm;} BPU_T_UN_Signature;typedef union _BPU_T_UN_Signature_Params {  BPU_T_LDGM_Params *ldgm;} BPU_T_UN_Signature_Params;typedef struct _BPU_T_Signature_Ctx {  BPU_T_EN_Signature_Types type;  int (*_sign)(BPU_T_UN_Signature *signature, const BPU_T_GF2_Vector *message, const struct _BPU_T_Signature_Ctx *ctx);  int (*_verify)(BPU_T_EN_Signature_Verification_Result_Type* result, BPU_T_GF2_Vector *message, const BPU_T_UN_Signature *signature,      const struct _BPU_T_Signature_Ctx *ctx);  int (*_genKeyPair)(struct _BPU_T_Code_Ctx *ctx, BPU_T_UN_Signature_Params *params);  BPU_T_Code_Ctx *code_ctx;} BPU_T_Signature_Ctx;int BPU_signatureInitCtx(BPU_T_Signature_Ctx **ctx, const BPU_T_UN_Signature_Params *params, const BPU_T_EN_Signature_Types type);int BPU_signatureFreeCtx(BPU_T_Signature_Ctx **ctx);#endif // SIGCTX_H